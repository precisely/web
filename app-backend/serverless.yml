service: precisely

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: $<opt:stage, "dev">
  region: $<opt:region, "us-east-1">
  profile: $<self:provider.stage>-profile-precisely
  variableSyntax: "\\$<([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)>"
  environment:
    STAGE: $<self:provider.stage>
    REGION: $<self:provider.region>
    # remove for now: AWS_PROFILE: $<self:provider.stage>-serverless
    # Storing profile in env too as `sls invoke local` ignores the AWS profile in provider (needed for setup:database)
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:GetObject"
       Resource: "*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: $<self:custom.kmsSecrets.keyArn>
    - Effect: Allow
      Action:
        - dynamodb:*
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:table/$<self:provider.stage>-*"

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-plugin-scripts
  - serverless-offline
  - serverless-plugin-additional-stacks

custom:
  scripts:
    hooks:
      'deploy:finalize': yarn setup:database -s $<self:provider.stage>
  serverless-offline:
    port: 4000
  webpackIncludeModules: true
  serverless-kms-secrets:
    secretsFile: kms-secrets/kms-secrets.$<self:provider.stage>.$<self:provider.region>.yml
  kmsSecrets: $<file(./kms-secrets/kms-secrets.$<self:provider.stage>.$<self:provider.region>.yml)>
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
  # additionalStackResources:
  #   cognitoResources: &cognitoResources
  #     $<file(serverless/cognito.yml)>

  # additionalStacks:
  #   AuthStack:
  #     Deploy: Before
  #     <<: *cognitoResources

functions:
  graphql:
    handler: src/server/handler.graphqlHandler
    events:
    - http:
        path: api
        method: post
        cors: true
        authorizer:
          arn: $<env:COGNITO_ARN>
            # 'FN::GetAtt': [CognitoUserPool, Arn]
  setupDatabase:
    handler: src/storage/dynamo/setup.setupDatabase

  ingester:
    handler: src/systems/genetics-pipeline/genotypeIngester.genotypeIngester
    events:
    - s3:
        bucket: $<self:provider.stage>-precisely-genetics-vcf
        event: s3:ObjectCreated:*
  playground:
    handler: src/server/handler.playgroundHandler
    events:
    - http:
        path: playground
        method: get
        cors: true
  graphiql:
    handler: src/server/handler.graphiqlHandler
    events:
    - http:
        path: graphiql
        method: get
        cors: true
