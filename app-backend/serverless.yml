service:
  name: precisely
  awsKmsKeyArn: ${self:provider.vars.kmsKeyArns.${self:provider.vars.account}}

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, env:STAGE, "dev"}
  region: ${opt:region, env:REGION, "us-east-1"}
  profile: ${opt:profile, env:PROFILE, self:provider.vars.defaultProfile}

  # Store commonly used or noteworthy values here
  vars:
    account: ${self:provider.vars.nonDevAccounts.${self:provider.stage}, self:provider.vars.nonDevAccounts.default}

    graphQLAPIPath: "/api"

    auth0TenantName: ${self:provider.vars.account}-precisely
    auth0APIIdentifier: https://${self:provider.vars.account}-precise.ly/graphql/api

    # default AWS config profile name (used locally)
    defaultProfile: ${self:provider.vars.account}-profile-precisely

    # customDomain / Route53 config
    domain: "${self:provider.vars.domainMap.${self:provider.vars.account},
               self:provider.vars.domainMap.default}"
    domainMap:
      prod: precise.ly
      default: ${self:provider.stage}.codeprecisely.net

    # S3 resource names
    geneticsVCFBucket: ${self:provider.stage}-precisely-genetics-vcf
    genetics23andMeBucket: ${self:provider.stage}-precisely-genetics-23andme

    kmsKeyArns:
      dev: arn:aws:kms:us-east-1:416000760642:key/0105d430-1fa0-4621-add0-56ca31cbbee1
      beta:
      prod:

    # name of the AWS account (prod, stage or dev)
    nonDevAccounts:
      beta: beta
      prod: prod
      default: dev

    nodeEnv:
      beta: production
      prod: production
      default: development
      # otherwise NODE_ENV it will be "development"

  # environment for handlers
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}

    # NODE_ENV should only be "production" OR "development"
    # See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
    #      https://webpack.js.org/guides/production/#specify-the-environment
    # We set NODE_ENV automatically based on STAGE:
    #   production for beta and prod
    #   development for all other stages
    # Override by passing it as env var:
    #   NODE_ENV={production|development} yarn sls ...
    NODE_ENV: ${env:NODE_ENV, self:provider.vars.nodeEnv.${self:provider.stage}, self:provider.vars.nodeEnv.default }

    # S3 buckets
    S3_BUCKET_GENETICS_VCF: ${self:provider.vars.geneticsVCFBucket}
    S3_BUCKET_GENETICS_23ANDME: ${self:provider.vars.genetics23andMeBucket}

    GRAPHQL_API_PATH: ${self:provider.vars.graphQLAPIPath}

    # Auth0 values - needed for verifying Auth0 tokens
    AUTH0_TENANT_NAME: ${self:provider.vars.auth0TenantName} # set in Auth0: dev-precisely, beta-precisely, prod-precisely
    AUTH0_API_IDENTIFIER: ${self:provider.vars.auth0APIIdentifier}

    # Quick and dirty way to define admins for now
    # TODO: better approach
    ADMIN_EMAILS: "aneil@precise.ly,vishesh@causecode.com"

    DYNAMODB_LOCAL_ENDPOINT: http://localhost:${self:custom.dynamodb.start.port}
  # Not using environmentSecrets, but maybe for future
  # see: https://github.com/trek10inc/serverless-secrets
  # We put secrets & configuration values here
  # Using this approach, only credentials with access to an account
  # can change these values. For example,
  # environmentSecrets:
  #   ADMIN_EMAILS: ADMIN_EMAILS

iamRoleStatements:
  - Effect: Allow
    Action: KMS:Decrypt
    Resource: ${self:provider.vars.kmsKeyArn}

resources:
  - Resources: ${file(./serverless/resources/cors.yml)}
  - Resources: ${file(./serverless/resources/dynogels-tables.js)}
  - Resources: ${file(./serverless/resources/genetics-buckets.yml)}

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline # serverless-offline must be last in the list

custom:
  customDomain:
    domainName: ${self:provider.vars.domain}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
  dynamodb: # dynamodb-local settings
    start:
      port: 8000
      inMemory: true
      migrate: true
      # seed: true
  webpackIncludeModules: true

functions:
  APIAuthorizer:
    handler: src/services/auth/handlers.apiAuthorizer
    cors: true

  # VCF ingester is triggered by new file in S3_BUCKET_GENETICS_VCF
  VCFIngester:
    handler: src/services/genetics-pipeline/handlers.vcfIngester
    events:
      - s3:
          bucket: GeneticsVCF
          event: s3:ObjectCreated:*

  GraphQLPlayground:
    handler: src/services/graphql/handlers.playgroundHandler
    events:
      - http:
          path: ${self:provider.vars.graphQLAPIPath}
          method: get
          cors: true
          authorizer: APIAuthorizer

  GraphQLAPI:
    handler: src/services/graphql/handlers.apiHandler
    events:
      - http:
          path: ${self:provider.vars.graphQLAPIPath}
          method: post
          cors: true
          authorizer: APIAuthorizer
