service:
  name: precisely
  # awsKmsKeyArn: ${self:provider.vars.kmsKeyArn}

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, env:STAGE, "dev"}
  region: ${opt:region, env:REGION, "us-east-1"}
  profile: ${opt:profile, env:PROFILE, self:provider.vars.defaultProfile}
  deploymentBucket: ${self:provider.vars.account}-precisely-deployment-bucket

  # Store commonly used or noteworthy values here

  vars: 
    account: ${file(../serverless/common.yml):account}
    accountFromStage: ${file(../serverless/common.yml):accountFromStage}
    accountId: ${file(../serverless/common.yml):accountId}

    authorizerTTL:
      dev: ${env:AUTHORIZER_TTL, self:provider.vars.authorizerTTL.devDefault}
      default: 300
      devDefault: 0

    certificateName: "${self:provider.vars.certificateMap.${self:provider.stage},
                        self:provider.vars.certificateMap.default}"
    certificateMap:
      prod: "*.precise.ly"
      default: "*.codeprecisely.net"

    graphQLAPIPath: "/api"

    auth0TenantName:
      "${
          file(../serverless/common.yml):auth0TenantName.${self:provider.vars.account},
          file(../serverless/common.yml):auth0TenantName.default
      }"
    auth0APIIdentifier: https://${self:provider.vars.account}-precise.ly/graphql/api

    # default AWS config profile name (used locally)
    defaultProfile: ${self:provider.vars.account}-profile-precisely

    # customDomain / Route53 config
    domain: ${file(../serverless/common.yml):domain}
    domainMap: ${file(../serverless/common.yml):domainMap}

    # S3 resource names
    geneticsVCFBucket: ${self:provider.stage}-precisely-genetics-vcf
    genetics23andMeBucket: ${self:provider.stage}-precisely-genetics-23andme
    geneticsAkesogenBucket: ${self:provider.stage}-precisely-genetics-akesogen
    geneticsAncestryBucket: ${self:provider.stage}-precisely-genetics-ancestry

    # Ingestion ECS Fargate Task
    ingestionECSTaskDefinitionName: ${self:provider.stage}-IngestionECSTaskDefinition
    ingestionContainerName: ${self:provider.stage}-DefaultIngestionContainerName

    # kmsKeyArn: ${self:provider.vars.kmsKeyArns.${self:provider.vars.account}}
    # kmsKeyArns:
    #   dev: "arn:aws:kms:us-east-1:416000760642:key/0105d430-1fa0-4621-add0-56ca31cbbee1"
    #   beta: "TODO add arn"
    #   prod: "TODO add arn"
    #   offline: ""

    logLevel: ${self:provider.vars.logLevels.${self:provider.stage},
                    self:provider.vars.logLevels.default}
    logLevels:
      prod: INFO
      default: DEBUG

    nodeEnv:
      beta: production
      prod: production
      default: development
      # otherwise NODE_ENV it will be "development"


  ##
  ## Environment for handlers
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${self:provider.vars.accountId}

    LOG_LEVEL: ${self:provider.vars.logLevel}
    # NODE_ENV should only be "production" OR "development"
    # See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
    #      https://webpack.js.org/guides/production/#specify-the-environment
    # We set NODE_ENV automatically based on STAGE:
    #   production for beta and prod
    #   development for all other stages
    # Override by passing it as env var:
    #   NODE_ENV={production|development} yarn sls ...
    NODE_ENV: ${env:NODE_ENV, self:provider.vars.nodeEnv.${self:provider.stage}, self:provider.vars.nodeEnv.default }

    # S3 buckets
    S3_BUCKET_GENETICS_VCF: ${self:provider.vars.geneticsVCFBucket}
    S3_BUCKET_GENETICS_23ANDME: ${self:provider.vars.genetics23andMeBucket}
    S3_BUCKET_GENETICS_AKESOGEN: ${self:provider.vars.geneticsAkesogenBucket}
    S3_BUCKET_GENETICS_ANCESTRY: ${self:provider.vars.geneticsAncestryBucket}

    DOMAIN: ${self:provider.vars.domain}
    GRAPHQL_API_PATH: ${self:provider.vars.graphQLAPIPath}

    # Auth0 values - needed for verifying Auth0 tokens
    AUTH0_TENANT_NAME: ${self:provider.vars.auth0TenantName} # set in Auth0: dev-precisely, beta-precisely, prod-precisely
    AUTH0_API_IDENTIFIER: ${self:provider.vars.auth0APIIdentifier}

    # Quick and dirty way to define admins for now
    # TODO: better approach
    ADMIN_EMAILS: "aneil@precise.ly,vishesh@causecode.com"

    DYNAMODB_LOCAL_ENDPOINT: http://localhost:${self:custom.dynamodb.start.port}

resources:
  - Resources: ${file(./serverless/resources/roles.yml)}
  - Resources: ${file(./serverless/resources/cors.yml)}
  - Resources: ${file(./serverless/resources/dynogels-tables.js):Definitions}
  - Resources: ${file(./serverless/resources/genetics-buckets.yml)}
  - Resources: ${file(./serverless/resources/subnet.yml)}
  - Resources: ${file(./serverless/resources/ecs-fargate.yml)}

plugins:
  # Comment out the `serverless-domain-manager` line
  # on first-time deployment of a new stage, then uncomment it and redeploy
  - serverless-domain-manager
  - serverless-webpack
  - serverless-api-stage
  - serverless-dynamodb-local
  - serverless-shell
  - serverless-pseudo-parameters
  - serverless-offline # serverless-offline must be last in the list

custom:
  customDomain:
    domainName: ${self:provider.vars.domain}
    #basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: ${self:provider.vars.certificateName}
    endpointType: regional
  dynamodb: # dynamodb-local settings
    start:
      port: 8000
      inMemory: true
      migrate: true
      # seed: true
  stageSettings: # serverless-api-stage plugin
    ${self:custom.stageSettingsMap.${self:provider.vars.account}, self:custom.stageSettingsMap.default}

  stageSettingsMap:
    dev:
      MethodSettings:
        LoggingLevel: INFO # INFO ERR or NONE
        CachingEnabled: false
    default:
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      MethodSettings:
        LoggingLevel: INFO # INFO ERR or NONE
        CachingEnabled: true
        CacheTtlInSeconds: 3600

  webpackIncludeModules: true

functions:
  # DummyCloudFormationTest:
  #       role: PreciselyDefaultRole
  #       handler: src/services/dummy/handlers.dummy
  #       events:
  #         - http:
  #             path: '/dummy'
  #             method: get
  #             cors: true
# Comment out all the functions and uncomment the dummy lambda and the S3 config above to speed up deployment
# This is useful to test changes related cloudformation  
  APIAuthorizer:
    role: PreciselyDefaultRole
    handler: src/services/auth/handlers.apiAuthorizer
    cors: true

  GraphQLPlayground:
    role: PreciselyDefaultRole
    handler: src/services/graphql/handlers.playgroundHandler
    events:
      - http:
          path: ${self:provider.vars.graphQLAPIPath}
          method: get
          cors: true

  GraphQLAPI:
    role: PreciselyGraphQLAPIRole
    handler: src/services/graphql/handlers.apiHandler
    events:
      - http:
          path: ${self:provider.vars.graphQLAPIPath}
          method: post
          cors: true
          authorizer:
            name: APIAuthorizer
            type: request
            resultTtlInSeconds: ${self:provider.vars.authorizerTTL.${self:provider.vars.account},self:provider.vars.authorizerTTL.default}

  # VCF ingester is triggered by new file in S3_BUCKET_GENETICS_VCF
  VCFIngester:
    handler: src/services/genetics-pipeline/handlers.vcfIngester
    events:
      - s3:
          bucket: GeneticsVCF
          event: s3:ObjectCreated:*

  # Raw data uploader is triggered by new file in any of the raw data buckets
  RawDataUpload:
    handler: src/services/genetics-pipeline/handlers.rawDataUpload
    environment:
      SUBNET_ONE:
        Ref: DefaultSubnetOne
      SUBNET_TWO:
        Ref: DefaultSubnetTwo
      ECS_CLUSTER_NAME:
        Ref: DefaultECSCluster
      ECS_TASK_NAME: ${self:provider.vars.ingestionECSTaskDefinitionName}
      ECS_CONTAINER_NAME: ${self:provider.vars.ingestionContainerName}

    role: 
      'Fn::GetAtt': ["RawUploadLambdaRole", "Arn"]
    vpc:
      securityGroupIds:
        - Ref: DefaultVPCSecurityGroup
      subnetIds:
        - Ref: DefaultSubnetOne
        - Ref: DefaultSubnetTwo
    events:
      - s3:
          bucket: Genetics23andMe
          event: s3:ObjectCreated:*
