service: precisely

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  stage: $<opt:stage, "dev">
  region: $<opt:region, "us-east-1">
  profile: $<self:provider.stage>-serverless
  variableSyntax: "\\$<([ ~:a-zA-Z0-9._\\'\",\\-\\/\\(\\)]+?)>"
  environment:
    SECRETS: $<self:custom.kmsSecrets.secrets.SECRETS>
    REGION: $<self:provider.region>
    NODE_ENV: $<self:provider.stage>
    AWS_PROFILE: $<self:provider.stage>-serverless
    # Storing profile in env too as `sls invoke local` ignores the AWS profile in provider (needed for setup:database)
  resources:
    - $<file(serverless-resources/cognito.yml)>
    - $<file(serverless-resources/kms.yml)>
    - $<file(serverless-resources/s3.yml)>
    - $<file(serverless-resources/ecs.yml)>
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:GetObject"
       Resource: "*"
    - Effect: Allow
      Action:
        - KMS:Decrypt
      Resource: $<self:custom.kmsSecrets.keyArn>
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:table/$<self:provider.stage>-*"

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-kms-secrets
  - serverless-plugin-scripts
  - serverless-offline

custom:
  scripts:
    hooks:
      'deploy:finalize': yarn setup:database -- -s $<self:provider.stage>
  serverless-offline:
    port: 4000
  webpackIncludeModules: true
  serverless-kms-secrets:
    secretsFile: kms-secrets/kms-secrets.$<self:provider.stage>.$<self:provider.region>.yml
  kmsSecrets: $<file(./kms-secrets/kms-secrets.$<self:provider.stage>.$<self:provider.region>.yml)>
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

functions:
  graphql:
    handler: src/handler.graphqlHandler
    events:
    - http:
        path: api
        method: post
        cors: true
        authorizer:
          arn:
            'FN::GetAtt': [CognitoUserPool, Arn]
  setupDatabase:
    handler: src/dynogels-db/setup.setupDatabase
  ingester:
    handler: src/ingest-service/genotypeIngester.genotypeIngester
    events:
    - s3:
        bucket: $<self:stage>-precisely-genetics-ga4gh
        event: s3:ObjectCreated:*
  playground:
    handler: src/handler.playgroundHandler
    events:
    - http:
        path: playground
        method: get
        cors: true
  graphiql:
    handler: src/handler.graphiqlHandler
    events:
    - http:
        path: graphiql
        method: get
        cors: true
