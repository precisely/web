service:
  name: precisely-backend

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${self:custom.common.stage}
  region: ${self:custom.common.region}
  profile: ${self:custom.common.profile}
  deploymentBucket: ${self:custom.common.deploymentBucket}

  ##
  ## Environment for handlers
  environment:
    ENV: ${env:ENV}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${self:custom.common.accountId}

    LOG_LEVEL: ${self:custom.vars.logLevel}
    # NODE_ENV should only be "production" OR "development"
    # See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
    #      https://webpack.js.org/guides/production/#specify-the-environment
    # We set NODE_ENV automatically based on STAGE:
    #   production for beta and prod
    #   development for all other stages
    # Override by passing it as env var:
    #   NODE_ENV={production|development} yarn sls ...
    NODE_ENV: ${env:NODE_ENV, self:custom.vars.nodeEnv}

    FROM_EMAIL: ${self:custom.vars.fromEmail}

    # S3 buckets - the S3_BUCKET_ prefix follows the convention of serverless
    S3_BUCKET_BIOINFORMATICS_VCF: ${self:custom.vars.bioinformaticsVCFBucket}
    S3_BUCKET_BIOINFORMATICS_UPLOAD: ${self:custom.vars.bioinformaticsUploadBucket}
    S3_BUCKET_BIOINFORMATICS_ERROR: ${self:custom.vars.bioinformaticsErrorBucket}

    BASE_DOMAIN: ${self:custom.common.baseDomain} # the root domain, adjusted for developer environments
    GRAPHQL_API_PATH: ${self:custom.common.graphQLAPIPath}
    BIOINFORMATICS_UPLOAD_SIGNED_URL_PATH: ${self:custom.common.bioinformaticsUploadSignedURLPath}

    # Auth0 values - needed for verifying Auth0 tokens
    AUTH0_TENANT_NAME: ${self:custom.common.auth0Tenant} # set in Auth0: dev-precisely, beta-precisely, prod-precisely
    AUTH0_API_IDENTIFIER: https://${self:custom.common.account}-precise.ly/graphql/api

resources:
  - Resources: ${file(./serverless/resources/roles.yml)}
  - Resources: ${file(./serverless/resources/cors.yml)}
  - Resources: ${file(./serverless/resources/dynogels-tables.js):Definitions}
  - Resources: ${file(./serverless/resources/s3-buckets.yml)}
  - Resources: ${file(./serverless/resources/logs.yml)}
  - Resources: ${file(./serverless/resources/monitoring.yml)}
  - Resources: ${file(./serverless/resources/bioinformatics-ecs.yml)}
  - Resources: ${file(./serverless/resources/apigateway-stage.yml)}

plugins:
  - serverless-domain-manager
  - serverless-plugin-bind-deployment-id # required for APIGatewayStage resource
  - serverless-webpack
  - "@aneilbaboo/serverless-dynamodb-local"
  - serverless-plugin-scripts
  - serverless-plugin-git-variables
  - serverless-plugin-log-retention
  - serverless-dynamodb-autoscaling
  - serverless-offline # serverless-offline must be last in the list

custom:
  common: ${file(../serverless/common.js):vars}
  
  vars:
    authorizerTTL: ${env:AUTHORIZER_TTL,self:custom.vars.authorizerTTLMap.${self:custom.common.account},self:custom.vars.authorizerTTLMap.default}
    authorizerTTLMap:
      dev: 0
      default: 300

    # CloudFormation Exports from the app-aws-init stack
    subnetId: 
      Fn::ImportValue: SystemSubnetId
    securityGroupIdAllowInboundSSH: 
      Fn::ImportValue: SystemSecurityGroupAllowInboundSSHId

    nodeEnv: ${env:NODE_ENV, self:custom.vars.nodeEnvMap.${self:custom.common.account}}
    nodeEnvMap:
      dev: development
      prod: production
      beta: production

    logLevel: ${env:LOG_LEVEL, self:custom.vars.logLevelMap.${self:custom.common.account}}
    logLevelMap:
      prod: INFO
      beta: INFO
      dev: DEBUG
      offline: DEBUG

    fromEmail: ${self:custom.vars.fromEmailMap.${self:custom.common.account}}
    fromEmailMap:
      prod: customer-success@precise.ly
      beta: customer-success@precisionhealth.site
      dev: no-one-dev-environment@example.com
      offline: no-one-offline-environment@example.com

    # S3 resource names
    bioinformaticsVCFBucket: ${self:provider.stage}-precisely-bioinformatics-vcf
    bioinformaticsUploadBucket: ${self:provider.stage}-precisely-bioinformatics-upload
    bioinformaticsErrorBucket: ${self:provider.stage}-precisely-bioinformatics-error

    # Bioinformatics ECS resource names
    bioinformaticsECSClusterName: ${self:provider.stage}-BioinformaticsECSCluster
    bioinformaticsECSContainerName: ${self:provider.stage}-BioinformaticsECSContainer
    bioinformaticsECSTaskName: ${self:provider.stage}-BioinformaticsECSTask

  capacities: # serverless-dynamodb-autoscaling
    ${file(./serverless/resources/dynogels-tables.js):Autoscaling}

  customDomain: # domain-manager settings - for the api
    domainName: ${self:custom.common.apiDomain}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: ${self:custom.common.certificateName}
    endpointType: regional

  dynamodb: # dynamodb-local settings
    start: ${self:custom.dynamodbMode.${env:DYNAMODB_MODE, "disk"}}

  dynamodbMode:
    memory:
      port: ${env:DYNAMODB_LOCAL_PORT, "8000"}
      migrate: true
      inMemory: true
      heapInitial: 2048m
      heapMax: 2048m
    disk:
      port: ${env:DYNAMODB_LOCAL_PORT, "8000"}
      migrate: true
      dbPath: .dynamodb
      sharedDb: true
      heapInitial: 2048m
      heapMax: 2048m

  # serverless-plugin-git-variables doesn't work in the CI environment, so disable it
  exportGitVariables: ${self:custom.exportGitVariablesOptions.${env:CI, "default"}}
  exportGitVariablesOptions:
    true: false
    default: true

  logRetentionInDays: 30 # used to set a global value for all functions

  scripts:
    commands:
      console: ts-node -r tsconfig-paths/register
      dynamodb:reset: ts-node -r tsconfig-paths/register src/db/scripts/cli.ts dynamodb:reset
      env: env
      test: node_modules/.bin/jest -t '${opt:t, ''}' --env=jsdom --runInBand '${opt:f, ""}'
      test:watch: node_modules/.bin/jest -t '${opt:t, ''}' --env=jsdom --runInBand --watch '${opt:f, ""}'
      test:coverage: node_modules/.bin/jest -t '${opt:t, ''}' --env=jsdom --runInBand --coverage '${opt:f, ""}'
      test:trace: node --trace-warnings node_modules/.bin/jest -t '${opt:t, ''}' --env=jsdom --runInBand '${opt:f, ""}'
      seed:clear: ts-node -r tsconfig-paths/register src/db/scripts/cli.ts seed:clear ${opt:model, opt:models, ""}
      seed:genetics: ts-node -r tsconfig-paths/register src/db/scripts/cli.ts seed:genetics "${opt:user, ''}" "${opt:genetics, ''}"
      seed:variant: ts-node -r tsconfig-paths/register src/db/scripts/cli.ts seed:variant "${opt:user, ''}" "${opt:variant, ''}"
      seed:reports: ts-node -r tsconfig-paths/register src/db/scripts/cli.ts seed:reports
      seed: ts-node -r tsconfig-paths/register src/db/scripts/cli.ts
    
  serverless-offline:
    port: ${self:custom.common.offlineAPIPort}

  stageSettings: # serverless-api-stage plugin
    ${self:custom.stageSettingsMap.${self:custom.common.account}, self:custom.stageSettingsMap.default}

  stageSettingsMap:
    dev:
      MethodSettings:
        LoggingLevel: INFO # INFO ERR or NONE
        CachingEnabled: false
    default:
      CacheClusterEnabled: true
      CacheClusterSize: '0.5'
      MethodSettings:
        LoggingLevel: INFO # INFO ERR or NONE
        CachingEnabled: true
        CacheTtlInSeconds: 3600

  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    # includeModules: true # auto-pack Node modules
    packager: 'yarn'     # Packager that will be used to package your external modules

functions:
  APIAuthorizer:
    role: DefaultRole
    handler: src/services/auth/handlers.apiAuthorizer
    cors: true

  GraphQLPlayground:
    role: DefaultRole
    handler: src/services/graphql/handlers.playgroundHandler
    events:
      - http:
          path: ${self:custom.common.graphQLAPIPath}
          method: get
          cors: true

  GraphQLAPI:
    role: GraphQLAPIRole
    handler: src/services/graphql/handlers.apiHandler
    events:
      - http:
          path: ${self:custom.common.graphQLAPIPath}
          method: post
          cors: true
          authorizer:
            name: APIAuthorizer
            type: request
            resultTtlInSeconds: ${self:custom.vars.authorizerTTL}

  SendEmail:
    role: DangerPIISystemRole
    handler: src/services/email/handlers.sendEmail

  BioinformaticsUpdateAllUsersVariantCalls:
    role: SystemRole
    handler: src/services/bioinformatics/handlers.updateAllUsersVariantCalls
    timeout: 300
    events:
      - schedule: cron(0 * * * ? *)
    environment:
      STAGE: ${self:provider.stage}
      CLUSTER: ${self:custom.vars.bioinformaticsECSClusterName}
      TASK: ${self:custom.vars.bioinformaticsECSTaskName}
      SUBNET: ${self:custom.vars.subnetId}
      SECURITY_GROUP: ${self:custom.vars.securityGroupIdAllowInboundSSH}

  BioinformaticsGetUploadSignedURL:
    role: UserUploadS3Role
    handler: src/services/bioinformatics/handlers.getUploadSignedURL
    events:
      - http:
          path: ${self:custom.common.bioinformaticsUploadSignedURLPath}
          method: get
          cors: true
          authorizer:
            name: APIAuthorizer
            type: request
            resultTtlInSeconds: ${self:custom.vars.authorizerTTL}
          integration: lambda
          request:
            template:
              application/json: ${file(./serverless/resources/lambda-http-template)}
    environment:
      S3_BUCKET_BIOINFORMATICS_UPLOAD: ${self:custom.vars.bioinformaticsUploadBucket}

  # Runs automatically when a file is uploaded. See also
  # s3-buckets.yml/BioinformaticsUploadLambdaPermission.
  BioinformaticsProcessUpload:
    role: SystemRole
    handler: src/services/bioinformatics/handlers.processUpload
    events:
      - s3:
          bucket: BioinformaticsUpload # XXX: Actually S3BucketBioinformaticsUpload!
          event: s3:ObjectCreated:*
    environment:
      STAGE: ${self:provider.stage}
      CLUSTER: ${self:custom.vars.bioinformaticsECSClusterName}
      TASK: ${self:custom.vars.bioinformaticsECSTaskName}
      SUBNET: ${self:custom.vars.subnetId}
      SECURITY_GROUP: ${self:custom.vars.securityGroupIdAllowInboundSSH}

  SysAddNewVariantRequirementsFromReports:
    role: SystemRole
    handler: src/services/system/handlers.addNewVariantRequirementsFromReports
    timeout: 120
    events:
      - schedule: cron(0/10 * * * ? *)

  SysUpdateVariantRequirementStatuses:
    role: SystemRole
    handler: src/services/system/handlers.updateVariantRequirementStatuses
    timeout: 120
    
  SysGetVariantRequirements:
    role: SystemRole
    handler: src/services/system/handlers.getVariantRequirements
    timeout: 120

  UserSampleCreate:
    role: SystemRole
    handler: src/services/user-sample/handlers.createUserSample
    timeout: 120

  UserSampleUpdate:
    role: SystemRole
    handler: src/services/user-sample/handlers.updateUserSample
    timeout: 120

  VariantCallBatchCreate:
    role: SystemRole
    handler: src/services/variant-call/handlers.batchCreate
    timeout: 120
