---
DefaultRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: ${self:provider.stage}-PreciselyDefaultRole
    AssumeRolePolicyDocument: &DefaultAssumeRolePolicyDocument
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - apigateway.amazonaws.com
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
    ManagedPolicyArns: &DefaultManagedPolicyArns
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Policies:
      - ${file(./serverless/resources/role-policies.yml):DefaultPolicy}

GraphQLAPIRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: ${self:provider.stage}-PreciselyGraphQLAPIRole
    AssumeRolePolicyDocument: *DefaultAssumeRolePolicyDocument
    ManagedPolicyArns: *DefaultManagedPolicyArns
    Policies:
      - ${file(./serverless/resources/role-policies.yml):DefaultPolicy}
      - ${file(./serverless/resources/role-policies.yml):APIPolicy}

SystemRole: 
  Type: AWS::IAM::Role
  Properties:
    RoleName: ${self:provider.stage}-PreciselySystemRole
    AssumeRolePolicyDocument: &SystemAssumeRolePolicyDocument
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              # APIGateway NOT allowed
              - lambda.amazonaws.com
              - ecs.amazonaws.com
              - ec2.amazonaws.com
              - ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
    ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess 
      - arn:aws:iam::aws:policy/AmazonSQSFullAccess
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess 
      - arn:aws:iam::aws:policy/AmazonSESFullAccess
  
    Policies:  
      - ${file(./serverless/resources/role-policies.yml):DefaultPolicy}
      - ${file(./serverless/resources/role-policies.yml):ECSPolicy}

UserUploadLambdaRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: ${self:provider.stage}-PreciselyUserUploadRole
    AssumeRolePolicyDocument: *DefaultAssumeRolePolicyDocument
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Policies:
      - ${file(./serverless/resources/role-policies.yml):UserUploadPolicy}
...
