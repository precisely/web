import { APIGatewayEvent, Context as LambdaContext } from 'aws-lambda';
import { Auth0AuthenticationResult } from './auth0';
import _permissions from './permissions';
import { RBACPlus, IPermission } from 'rbac-plus';
import { TypedError } from 'src/common/errors';

// This is the third argument to every GraphQL resolver
export class GraphQLContext {
  constructor(
    public readonly event: APIGatewayEvent,
    public readonly lambdaContext: LambdaContext,
    public permissions: RBACPlus = _permissions) {
  }

  // tslint:disable-next-line
  can(scope: string, resource?: any): IPermission {
    let result: IPermission = {};
    for (const role of this.roles) {
      this.permissions.can(role, scope, {
        event: this.event,
        user: { id: this.userId, roles: this.roles }
      });
    }
    return result;
  }

  /**
   * Roles assigned to the current user
   */
  get roles(): string[] {
    return this.auth.roles ? this.auth.roles.split(',') : [];
  }

  /**
   * The policy context generated by the custom authorizer
   */
  get auth(): Auth0AuthenticationResult {
    return <Auth0AuthenticationResult> this.event.requestContext.authorizer;
  }

  /**
   * Shortcut for accessing the currently active user
   */
  get userId(): string {
    return this.event.requestContext.authorizer.principalId; // the auth0 userId "auth0|a6b34ff91"
  }
}

/**
 * Scope decorator - useful when a scope
 * E.g.,
 * class FooResolver {
 *   @scoped('Foo:read') // user must have the 'foo:read' scope
 *   static read(foo: Foo) { return Foo.get('value'); }
 * }
 * export const resolvers = {
 *   Foo: FooResolver
 * };
 *
 * @export
 * @param {string} resourceScopes
 * @returns {string} resolvedScope
 */
export function scoped(scope: string) {
  // tslint:disable-next-line
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    const methodName: string = method.name;
    // tslint:disable-next-line
    descriptor.value = function (obj: any, args: any, context: GraphQLContext) {
      let permission = context.can(scope, obj);
      if (permission.granted) {
        if (permission.constraint.fields) {
          let fields = <string[]> permission.constraint.fields;
          if (fields.indexOf(methodName) !== -1) {
            return method.apply(this, arguments);
          }
        }

      } else {
        throw new TypedError(`Not authorized for ${scope}`, 'accessDenied');
      }
    };
  };
}
