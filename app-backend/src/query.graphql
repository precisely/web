#import "./user-data-map/api/schema.graphql"
#import "./genotype-service/api/schema.graphql"
#import "./report-service/api/schema.graphql"

type GenericResponse {
    success: Boolean,
    message: String
}

input LastEvaluatedGenotypeRecord {
    opaqueId: String
    gene: String
}

input LastEvaluatedReportRecord {
    id: String!
    slug: String!
}

type Query {
    listUserDataMap(limit: Int, offset: Int): [UserDataMap],
    genotypeList(
            limit: Int,
            lastEvaluatedKeys: LastEvaluatedGenotypeRecord,
            opaqueId: String,
            gene: String,
    ): GenotypeList,
    getGenotypeData(opaqueId: String!, gene: String!): Genotype
    reports(slug: String!, limit: Int, lastEvaluatedKeys: LastEvaluatedReportRecord): ReportList,
    report(
            slug: String, 
            id: String, 
            userId: String!,
            vendorDataType: String!,
            limit: Int,
            lastEvaluatedKeys: LastEvaluatedReportRecord,
    ): ReportList,
}

type Mutation {
    findOrCreateUserDataMap(userId: String!, vendorDataType: String!): UserDataMap,
    updateGenotype(
            opaqueId: String!, # Required while updating
            sampleId: String,
            source: String,
            gene: String!, # Required while updating
            variantCall: String,
            zygosity: String,
            startBase: String,
            chromosomeName: String,
            variantType: String,
            quality: String
    ): Genotype,
    createGenotype(
            opaqueId: String!, # All the fields are required while creating a record.
            sampleId: String!,
            source: String!,
            gene: String!,
            variantCall: String!,
            zygosity: String!,
            startBase: String!,
            chromosomeName: String!,
            variantType: String!,
            quality: String!
    ): Genotype,
    saveReport(slug: String!, title: String!, rawContent: String!, genes: [String]): Report,
}
