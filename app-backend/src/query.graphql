#import "./user-data-map/api/schema.graphql"
#import "./genetics-service/api/schema.graphql"
#import "./report-service/api/schema.graphql"

type GenericResponse {
    success: Boolean,
    message: String
}

input LastEvaluatedGeneticsRecord {
    opaqueId: String
    gene: String
}

input LastEvaluatedReportRecord {
    dataTypeUserId: String
    gene: String
}

type Query {
    listUserDataMap(limit: Int, offset: Int): [UserDataMap],
    geneticsList(
            limit: Int,
            lastEvaluatedKeys: LastEvaluatedGeneticsRecord,
            opaqueId: String,
            gene: String,
    ): GeneticsList,
    getGeneticsData(opaqueId: String!, gene: String!): Genetics,
    listReports(limit: Int, lastEvaluatedKeys: LastEvaluatedReportRecord, createdAt: String): ReportList,
    getReport(slug: String!, id: String!, userId: String!): Report,
}

type Mutation {
    findOrCreateUserDataMap(userId: String!, vendorDataType: String!): UserDataMap,
    updateGenetics(
            opaqueId: String!, # Required while updating
            sampleId: String,
            source: String,
            gene: String!, # Required while updating
            variantCall: String,
            zygosity: String,
            startBase: String,
            chromosomeName: String,
            variantType: String,
            quality: String
    ): Genetics,
    createGenetics(
            opaqueId: String!, # All the fields are required while creating a record.
            sampleId: String!,
            source: String!,
            gene: String!,
            variantCall: String!,
            zygosity: String!,
            startBase: String!,
            chromosomeName: String!,
            variantType: String!,
            quality: String!
    ): Genetics,
    saveReport(slug: String!, title: String!, content: String!, genes: [String]): Report,
}
