# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2

ALIASES:
    defaults: &defaults
        docker:
            # specify the version you desire here
            - image: aneilbaboo/precisely-circleci-node-2018-07-24
              environment:
                STAGE: test

    checkout: &checkout
        checkout:
            path: ~/repo

    frontend_defaults: &frontend_defaults
        <<: *defaults
        working_directory: ~/repo/app-client

    backend_defaults: &backend_defaults
        <<: *defaults
        working_directory: ~/repo/app-backend

    restore_frontend_cache: &restore_frontend_cache
        restore_cache:
            keys:
                - '{{ .Environment.CACHE_KEY }}-dependencies-frontend-{{ checksum "package.json" }}'
                - '{{ .Environment.CACHE_KEY }}-dependencies-frontend'

    save_frontend_cache: &save_frontend_cache
        save_cache:
            paths:
                - node_modules
            key: '{{ .Environment.CACHE_KEY }}-dependencies-frontend-{{ checksum "package.json" }}'

    restore_backend_cache: &restore_backend_cache
        restore_cache:
            keys:
                - '{{ .Environment.CACHE_KEY }}-dependencies-backend-{{ checksum "package.json" }}'
                - '{{ .Environment.CACHE_KEY }}-dependencies-backend'

    save_backend_cache: &save_backend_cache
        save_cache:
            paths:
                - node_modules
                - .dynamodb
            key: '{{ .Environment.CACHE_KEY }}-dependencies-backend-{{ checksum "package.json" }}'

    yarn_install: &yarn_install
        run:
            name: Installing Dependencies
            command: yarn install --network-concurrency 1

    install_dynamodb: &install_dynamodb
        run:
            name: Installing DynamoDB
            command: ENV=test-offline yarn sls dynamodb install
    
    run_dynamodb: &run_dynamodb
        run:
            name: Running DynamoDB
            command: yarn dynamodb:test-offline
            background: true

    build_webpack: &build_webpack
        run:
            name: Building with Webpack
            # XXX: Nasty hack - in some environments (i.e., in Docker containers) yarn build fails
            #      on first attempt and succeeds on the second run
            #      The first run will attempt to build the app-client module for some reason
            command: ENV=test-offline yarn build || ENV=test-offline yarn build

    run_backend_tests: &run_backend_tests
        run:
            name: Run Backend Tests
            command: |
                yarn test:coverage
                yarn tslint

    run_frontend_tests: &run_frontend_tests
        run:
            name: Run Frontend Tests
            command: |
                yarn test:coverage
                yarn tslint
                yarn eslint
                
    upload_coverage_report: &upload_coverage_report
        run:
            name: Save Coverage Report in S3
            command: |
                cc-test-reporter format-coverage -t lcov --output "coverage/codeclimate.$CIRCLE_JOB.json" --add-prefix ${PWD##*/}
                AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync coverage/ "s3://dev-precisely-codeclimate/coverage/$CIRCLE_SHA1"

workflows:
    version: 2
    build-test-and-deploy:
        jobs:
            - build-frontend
            - build-backend

            # - report-codeclimate:
            #     requires:
            #         - build-frontend
            #         - build-backend

            # run this job only when dev branch is build
            - beta-deploy-backend:
                filters:
                    branches:
                        only:
                            - dev
                requires:
                    - build-backend
                    - build-frontend

            - beta-deploy-frontend:
                filters:
                    branches:
                        only:
                            - dev
                requires:
                    - beta-deploy-backend

jobs:
    build-frontend:
        <<: *frontend_defaults

        steps:
            - *checkout
            - *restore_frontend_cache
            - *yarn_install
            - *save_frontend_cache
            - *run_frontend_tests
            - *upload_coverage_report

    build-backend:
        <<: *backend_defaults

        steps:
            - *checkout
            - *restore_backend_cache
            - *yarn_install
            - *install_dynamodb
            - *run_dynamodb
            - run: yarn env:test-offline ./scripts/wait-for-dynamodb-local.sh
            - *save_backend_cache
            - *run_backend_tests
            - *build_webpack
            - *upload_coverage_report

    report-codeclimate:
        <<: *defaults
        working_directory: ~/repo
        steps:
            - run:
                name: Reporting CodeClimate results
                command: |
                    AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync "s3://dev-precisely-codeclimate/coverage/$CIRCLE_SHA1" coverage/
                    cc-test-reporter sum-coverage -p 2 -o coverage/codeclimate-final.json coverage/codeclimate.*.json
                    cc-test-reporter upload-coverage -i coverage/codeclimate-final.json

    beta-deploy-frontend:
        <<: *frontend_defaults
        steps:
            - *checkout
            - *restore_frontend_cache
            - run:
                name: Set AWS Profile (frontend)
                command: ./node_modules/.bin/serverless config credentials --provider aws -n beta-profile-precisely --region ${AWS_REGION} --key ${AWS_ACCESS_KEY_STAGE} --secret ${AWS_SECRET_KEY_STAGE}
            - run:
                name: Deploying frontend on Staging
                command: STAGE=beta REGION=${AWS_REGION} ./node_modules/.bin/serverless deploy

    beta-deploy-backend:
        <<: *backend_defaults
        steps:
            - *checkout
            - *restore_backend_cache
            - run:
                name: Set AWS Profile (backend)
                command: ./node_modules/.bin/serverless config credentials --provider aws -n beta-profile-precisely --region ${AWS_REGION} --key ${AWS_ACCESS_KEY_STAGE} --secret ${AWS_SECRET_KEY_STAGE}
            - run:
                name: Deploying backend on Staging
                command: STAGE=beta REGION=${AWS_REGION} ./node_modules/.bin/serverless deploy
