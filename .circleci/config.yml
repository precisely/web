# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2

ALIASES:
    defaults: &defaults
        docker:
            # specify the version you desire here
            - image: aneilbaboo/node:8.10

            # Specify service dependencies here if necessary
            # CircleCI maintains a library of pre-built images
            # documented at https://circleci.com/docs/2.0/circleci-images/
            # - image: circleci/mongo:3.4.4

    checkout: &checkout
        checkout:
            path: ~/repo

    frontend_defaults: &frontend_defaults
        <<: *defaults
        working_directory: ~/repo/app-client

    backend_defaults: &backend_defaults
        <<: *defaults
        working_directory: ~/repo/app-backend

    restore_frontend_cache: &restore_frontend_cache
        restore_cache:
            keys:
                - v1-dependencies-frontend-{{ checksum "package.json" }}
                - v1-dependencies-frontend

    save_frontend_cache: &save_frontend_cache
        save_cache:
            paths:
                - node_modules
            key: v1-dependencies-frontend-{{ checksum "package.json" }}

    restore_backend_cache: &restore_backend_cache
        restore_cache:
            keys:
                - v1-dependencies-backend-{{ checksum "package.json" }}
                - v1-dependencies-backend

    save_backend_cache: &save_backend_cache
        save_cache:
            paths:
                - node_modules
            key: v1-dependencies-backend-{{ checksum "package.json" }}

    yarn_install: &yarn_install
        run:
            name: Installing Dependencies
            command: yarn install

    install_dynamodb: &install_dynamodb
        run:
            name: Installing DynamoDB
            command: yarn dynamodb:install

    run_tests: &run_tests
        run:
            name: Run Tests
            command: |
                yarn test
                yarn tslint
                yarn eslint

    upload_coverage_report: &upload_coverage_report
        run:
            name: Save Coverage Report in S3
            command: |
                cc-test-reporter format-coverage -t lcov --output "coverage/codeclimate.$CIRCLE_JOB.json" --add-prefix ${PWD##*/}
                AWS_REGION=us-east-1 AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync coverage/ "s3://dev-precisely-codeclimate/coverage/$CIRCLE_SHA1"

workflows:
    version: 2
    build-test-and-deploy:
        jobs:
            - build-frontend
            - build-backend

            - report-codeclimate:
                requires:
                    - build-frontend
                    - build-backend

            # run this job only when dev branch is build
            - beta-deploy-backend:
                filters:
                    branches:
                        only:
                            - dev
                requires:
                    - build-backend
                    - build-frontend

            - beta-deploy-frontend:
                filters:
                    branches:
                        only:
                            - dev
                requires:
                    - beta-deploy-backend

jobs:
    build-frontend:
        <<: *frontend_defaults

        steps:
            - *checkout
            - *restore_frontend_cache
            - *yarn_install
            - *save_frontend_cache
            - *run_tests
            - *upload_coverage_report

    build-backend:
        <<: *backend_defaults

        steps:
            - *checkout
            - *restore_backend_cache
            - *yarn_install
            - *install_dynamodb
            - *save_backend_cache
            - *run_tests
            - *upload_coverage_report

    report-codeclimate:
        <<: *defaults
        work_directory: ~/repo
        steps:
            - run:
                name: Reporting CodeClimate results
                command: |
                    AWS_REGION=us-east-1 AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync "s3://dev-precisely-codeclimate/coverage/$CIRCLE_SHA1" coverage/
                    cc-test-reporter sum-coverage -p 2 -o coverage/codeclimate-final.json coverage/codeclimate.*.json
                    cc-test-reporter upload-coverage -i coverage/codeclimate-final.json


    beta-deploy-frontend:
        <<: *frontend_defaults

        steps:
            - *checkout

            - *restore_frontend_cache

            - run:
                name: Set AWS Profile
                command: ./node_modules/.bin/serverless config credentials --provider aws -n beta-profile-precisely --key ${AWS_ACCESS_KEY_STAGE} --secret ${AWS_SECRET_KEY_STAGE}
            - run:
                name: Deploying frontend on Staging
                command: yarn deploy:stage

    beta-deploy-backend:
        <<: *backend_defaults

        steps:
            - *checkout

            - *restore_backend_cache

            - run:
                name: Set AWS Profile
                command: ./node_modules/.bin/serverless config credentials --provider aws -n beta-profile-precisely --key ${AWS_ACCESS_KEY_STAGE} --secret ${AWS_SECRET_KEY_STAGE}
            - run:
                name: Deploying backend on Staging
                command: yarn deploy:stage
