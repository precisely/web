# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#

ALIASES:
    defaults: &defaults
        environment: &environment
            CC_TEST_REPORTER_ID: d3c6223bb6beb7b56cc01e2865e445a028085cd455695307b99d521bfcd2e1c8
        docker:
            # specify the version you desire here
            - image: circleci/node:6.10.3

            # Specify service dependencies here if necessary
            # CircleCI maintains a library of pre-built images
            # documented at https://circleci.com/docs/2.0/circleci-images/
            # - image: circleci/mongo:3.4.4

    frontend_defaults: &frontend_defaults
        <<: *defaults
        environment:
            <<: *environment
            JOB_TYPE: frontend
        working_directory: ~/repo/app-client

    backend_defaults: &backend_defaults
        <<: *defaults
        environment:
            <<: *environment
            JOB_TYPE: backend
        working_directory: ~/repo/app-backend

    download_codeclimate: &download_codeclimate
        run:
            name: Download Code Climate test-reporter
            command: |
                if [[ ! -f cc-test-report ]]; then
                    curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                    chmod +x ./cc-test-reporter
                fi

    upload_codeclimate_results: &upload_codeclimate_results
        run:
            name: Upload Code Climate Results
            command: |
                ./cc-test-reporter format-coverage --output "coverage/codeclimate.$JOB_TYPE.json"
                AWS_REGION=us-east-1 AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync coverage/ "s3://dev-precisely-codeclimate/coverage/$BUILD_NUMBER"

    restore_frontend_cache: &restore_frontend_cache
        restore_cache:
            keys:
                - v1-dependencies-frontend-{{ checksum "package.json" }}
                - v1-dependencies-frontend

    save_frontend_cache: &save_frontend_cache
        save_cache:
            paths:
                - node_modules
                - cc-test-reporter
            key: v1-dependencies-frontend-{{ checksum "package.json" }}

    restore_backend_cache: &restore_backend_cache
        restore_cache:
            keys:
                - v1-dependencies-backend-{{ checksum "package.json" }}
                - v1-dependencies-backend

    save_backend_cache: &save_backend_cache
        save_cache:
            paths:
                - node_modules
                - cc-test-reporter
            key: v1-dependencies-backend-{{ checksum "package.json" }}

    checkout: &checkout
        checkout:
            path: ~/repo

version: 2
jobs:
    build-frontend:
        <<: *frontend_defaults

        steps:
            - *checkout

            - *restore_frontend_cache

            - run:
                name: Installing Dependencies
                command: yarn install

            - *download_codeclimate

            - *save_frontend_cache

            # run frontend tests!
            - run:
                name: Frontend Tests
                command: |
                    ./cc-test-reporter before-build
                    yarn test
                    ./cc-test-reporter after-build --debug -t lcov --exit-code $?

            # run linters!
            - run:
                name: TSLint
                command: yarn tslint
            - run:
                name: ESLint
                command: yarn eslint

            - *upload_codeclimate_results

    build-backend:
        <<: *backend_defaults

        steps:
            - *checkout

            # Download and cache dependencies
            - *restore_backend_cache

            - run:
                name: Installing Dependencies
                command: yarn install

            - *save_backend_cache

            - *download_codeclimate

            # run backend tests!
            - run:
                name: Backend Tests
                command: |
                    ./cc-test-reporter before-build
                    yarn test
                    ./cc-test-reporter after-build --debug -t lcov --exit-code $?

            # run linters!
            - run:
                name: TSLint
                command: yarn tslint
            - run:
                name: ESLint
                command: yarn eslint

            - *upload_codeclimate_results

    stage-deploy-frontend:
        <<: *frontend_defaults

        steps:
            - *checkout

            - *restore_frontend_cache

            - run:
                name: Set AWS Profile
                command: ./node_modules/.bin/serverless config credentials --provider aws -n stage-profile-precisely --key ${AWS_ACCESS_KEY_STAGE} --secret ${AWS_SECRET_KEY_STAGE}
            - run:
                name: Deploying frontend on Staging
                command: yarn deploy:stage

    stage-deploy-backend:
        <<: *backend_defaults

        steps:
            - *checkout

            - *restore_backend_cache

            - run:
                name: Set AWS Profile
                command: ./node_modules/.bin/serverless config credentials --provider aws -n stage-profile-precisely --key ${AWS_ACCESS_KEY_STAGE} --secret ${AWS_SECRET_KEY_STAGE}
            - run:
                name: Deploying backend on Staging
                command: yarn deploy:stage

workflows:
    version: 2
    build-test-and-deploy:
        jobs:
            - build-frontend
            - build-backend

            # run this job only when dev branch is build
            - stage-deploy-backend:
                filters:
                    branches:
                        only:
                            - dev
                requires:
                    - build-backend
                    - build-frontend

            - stage-deploy-frontend:
                filters:
                    branches:
                        only:
                            - dev
                requires:
                    - stage-deploy-backend
