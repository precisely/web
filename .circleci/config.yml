# -*- yaml-indent-offset: 4; -*-

version: 2.1

orbs:
    aws-cli: circleci/aws-cli@0.1.19

ALIASES:
    docker-image: &docker-image
        docker:
            - image: aneilbaboo/precisely-circleci-node-2018-10-14

    checkout: &checkout
        checkout:
            path: ~/repo

    restore_frontend_cache: &restore_frontend_cache
        restore_cache:
            keys:
                - '{{ .Environment.CACHE_KEY }}-dependencies-frontend-{{ checksum "package.json" }}'
                - '{{ .Environment.CACHE_KEY }}-dependencies-frontend'

    save_frontend_cache: &save_frontend_cache
        save_cache:
            paths:
                - node_modules
            key: '{{ .Environment.CACHE_KEY }}-dependencies-frontend-{{ checksum "package.json" }}'

    restore_backend_cache: &restore_backend_cache
        restore_cache:
            keys:
                - '{{ .Environment.CACHE_KEY }}-dependencies-backend-{{ checksum "package.json" }}'
                - '{{ .Environment.CACHE_KEY }}-dependencies-backend'

    save_backend_cache: &save_backend_cache
        save_cache:
            paths:
                - node_modules
                - .dynamodb
            key: '{{ .Environment.CACHE_KEY }}-dependencies-backend-{{ checksum "package.json" }}'

    yarn_install: &yarn_install
        run:
            name: Installing Dependencies
            command: yarn install --network-concurrency 1

    install_dynamodb: &install_dynamodb
        run:
            name: Installing DynamoDB
            command: |
                if [ ! -d .dynamodb ]; then yarn sls dynamodb install; else echo "DynamoDB already installed"; fi
                yarn dynamodb:enable-logging
    
    run_dynamodb: &run_dynamodb
        run:
            name: Running DynamoDB
            command: DYNAMODB_MODE=disk yarn dynamodb:test-offline && sleep 999d
            background: true

    build_webpack: &build_webpack
        run:
            name: Building with Webpack
            # XXX: Nasty hack - in some environments (i.e., in Docker containers) yarn build fails
            #      on first attempt and succeeds on the second run
            #      The first run will attempt to build the app-client module for some reason
            command: |
                rm -frd ../app-client
                ENV=test-offline yarn build || ENV=test-offline yarn build

    run_backend_tests: &run_backend_tests
        run:
            name: Run Backend Tests
            command: |
                yarn test:coverage
                yarn tslint

    run_frontend_tests: &run_frontend_tests
        run:
            name: Run Frontend Tests
            command: |
                yarn test:coverage
                yarn tslint
                yarn eslint

    setup_aws_deployment_profile_beta: &setup_aws_deployment_profile_beta
        aws-cli/setup:
            profile-name: beta-profile-precisely
            aws-access-key-id: BETA_AWS_ACCESS_KEY_ID
            aws-secret-access-key: BETA_AWS_SECRET_KEY
            aws-region: AWS_REGION

    setup_aws_deployment_profile_prod: &setup_aws_deployment_profile_prod
        aws-cli/setup:
            profile-name: prod-profile-precisely
            aws-access-key-id: PROD_AWS_ACCESS_KEY_ID
            aws-secret-access-key: PROD_AWS_SECRET_KEY
            aws-region: AWS_REGION

    upload_coverage_report: &upload_coverage_report
        run:
            name: Save Coverage Report in S3
            command: |
                cc-test-reporter format-coverage -t lcov --output "coverage/codeclimate.$CIRCLE_JOB.json" --add-prefix ${PWD##*/}
                AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync coverage/ "s3://dev-precisely-codeclimate/coverage/$CIRCLE_SHA1"

executors:
    precisely-frontend:
        <<: *docker-image
        working_directory: ~/repo/app-client
    precisely-backend:
        <<: *docker-image
        working_directory: ~/repo/app-backend

workflows:
    version: 2
    build-test-and-deploy:
        jobs:
            - build-frontend
            # FIXME: Backend build is busted. The latest DynamoDBLocal.jar which
            # gets downloaded and installed requires JDK8, but the Docker image
            # we use right now only has 7 available.
            # - build-backend

            # - report-codeclimate:
            #     requires:
            #         - build-frontend
            #         - build-backend

            # - beta-deploy-backend:
            #     filters:
            #         branches:
            #             only:
            #                 - dev
            #     requires:
            #         - build-backend
            #         - build-frontend

            # - beta-deploy-frontend:
            #     filters:
            #         branches:
            #             only:
            #                 - dev
            #     requires:
            #         - beta-deploy-backend

            # TODO: Add prod-deploy-backend when it makes sense.

            - prod-deploy-frontend:
                filters:
                    branches:
                        only:
                            - master
                requires:
                    - build-frontend

jobs:
    build-frontend:
        executor: precisely-frontend
        steps:
            - *checkout
            - *restore_frontend_cache
            - *yarn_install
            - *save_frontend_cache
            - *run_frontend_tests
            - *upload_coverage_report

    build-backend:
        executor: precisely-backend
        steps:
            - *checkout
            - *restore_backend_cache
            - *yarn_install
            - *install_dynamodb
            - *run_dynamodb
            - run: yarn env:test-offline ./scripts/wait-for-dynamodb-local.sh
            - *save_backend_cache
            - *run_backend_tests
            - *build_webpack
            - *upload_coverage_report

    report-codeclimate:
        executor: precisely-backend
        working_directory: ~/repo
        steps:
            - run:
                name: Reporting CodeClimate results
                command: |
                    AWS_SECRET_ACCESS_KEY=$CODECLIMATE_AWS_SECRET_ACCESS_KEY AWS_ACCESS_KEY_ID=$CODECLIMATE_AWS_ACCESS_KEY_ID aws s3 sync "s3://dev-precisely-codeclimate/coverage/$CIRCLE_SHA1" coverage/
                    cc-test-reporter sum-coverage -p 2 -o coverage/codeclimate-final.json coverage/codeclimate.*.json
                    cc-test-reporter upload-coverage -i coverage/codeclimate-final.json

    beta-deploy-frontend:
        executor: precisely-frontend
        steps:
            - *checkout
            - *restore_frontend_cache
            - *setup_aws_deployment_profile_beta
            - run:
                name: Deploying frontend on BETA
                command: ENV=beta yarn deploy

    beta-deploy-backend:
        executor: precisely-backend
        steps:
            - *checkout
            - *restore_backend_cache
            - *setup_aws_deployment_profile_beta
            - run:
                name: Deploying backend on BETA
                command: SLS_DEBUG=* ENV=beta yarn deploy

    prod-deploy-frontend:
        executor: precisely-frontend
        steps:
            - *checkout
            - *restore_frontend_cache
            - *setup_aws_deployment_profile_prod
            - run:
                name: Deploying frontend on PRODUCTION
                command: ENV=prod yarn deploy
